RELEASE 2.2.0 WIP
NEW TERMS: 
	VAESPS - vertex and edge skip processing support
	VCP - vertex connection point

HIGHLIGHTS:
	* VCPs has been added into GraphX making edge endpoint fixation(binding) possible. By default GraphX automaticaly calculates edge endpoint position relative to vertex dimensions 
	   and approximate math shape, but with this feature on you'll be able to bind edge endpoint to a separate customizable object. This will allow you to create static edge fixation
	   endpoints on the vertex and give you full control over edge endpoints positioning.
	* Now you can easily customize edge pointers with the help of DefaultEdgePointer class which can host any content including Image/Path and supports rotation. Changes include more 
	   precious edge endpoint calculations so the edge will overlap with the edge pointer no more. Because of these changes the old logic that utilizes direct Path object in EdgeControl 
	   template will be removed completely in favor of notable performance improvements.
	* Now GraphX for WPF requires only .NET Framework 4.0 to build & run. Deprecated all code that required .NET 4.0.3.
	* Now you can use "http://schemas.panthernet.ru/graphx/" XAML namespace in GraphX for WPF for all its visual content. Additionaly, output filenames for WPF/METRO dlls are both changed to 
		GraphX.Controls.dll so Post-Build process copies output files to GraphX/Bin folder with distinct filenames reflecting the platform as before.
	* Performance improvements are always welcome. In this release the whole layout calculation logic has been revisited in terms of both performance and code quality gains. We've also eliminated
		some redundant layout updates, moved all math & algorithms handling from GraphArea directly to LogicCore under better async implementation, cleaned up ZoomControl logic,
		revisited edges & edge labels code to remove redundant calculation passes.

DETAILED CHANGELOG:
+ Added support for custom VCP [WPF, METRO]
	* New control class added: StaticVertexConnectionPoint. It represents ContentControl which can host virtualy any valid object
	* VCP support the same math shapes as VertexShape property or can use VertexShape::None value to disable roundtrip calculations	
+ Added vertex and edge skip processing support to METRO version (VAESPS) [METRO]
+ Added VAESPS for following algorithms: Circular [ALL]
+ Added VertexShape::None enum option, currently affecting only VCP logic [ALL]
+ Added different layout options to EfficientSugiyama algorithm using new Direction param [ALL]
+ Added true orthogonal edge routing for EfficientSugiyama algorithm using EdgeRouting param [ALL]
+ Added new property GraphArea::ControlsDrawOrder which defines vertex or edges should be drawn topmost [WPF, METRO]
+ Added GraphArea::PreloadGraph() method for manual graph rendering which generate vertices and edges from GraphArea::LogicCore.Graph property 
	w/o any algorithms and also sets custom vertices positions if needed [WPF, METRO]
+ Added new EdgeControl template PART (PART_SelfLoopedEdge) for custom self looped edge indicator visualization. It represents FrameworkElement and if specified in the template
	will be positioned in the top left vertex corner. Also made indicator settings more flexible by implementing some dependency props [WPF, METRO]
+ Added StateStorage::SaveOrUpdateState() method for easier use [WPF,METRO]
+ Added new readonly property EdgeControl::IsParallel that identifies edge as currently parallel to other edge. Made GraphArea::ParalellizeEdges() method public to be able to refresh IsParallel property on manual graph operations [METRO, WPF]
+ Added EdgeLabelControl::FlipOnRotation dependency property which controls if label should be flipped when axis is changed while rotating [WPF, METRO]
+ Fixed parallel edges labels handling. Now edge labels are more readable when there are two of them [WPF, METRO]
+ Fixed edge routing when graph state has been loaded. Graph state now stores AlgorithmStorage too [ALL]
+ Fixed ZoomControl zoom out to the value equal to zoom in resulting in similar smooth zoom [WPF, METRO]
+ Fixed ZoomControl::Zoom cproperty change not firing [WPF, METRO]
+ Fixed manual graph composition routines in case of ER algorithm is set [ALL]
+ Fixed first time solution rebuild problems by referencing new QuickGraphPCL nuget [ALL] 
+ Fixed layout algorithm calculations to always receive actual vertex positions as input parameter
	This will fix VAESPS for default algorithms. [WPF, METRO]
+ Fixed edge pointer positioning bug [METRO]
+ Fixed redundant edge rendering in some cases when vertex coordinates are changed manualy [WPF, METRO]
+ Fixed edge overlapping edge pointers [WPF, METRO]
+ Fixed use of ControlFactory for edge deserialization [WPF, METRO] thanks to perturbare
+ Fixed some algorithm calculation problems, especial FR [ALL]
+ Fixed EdgeControl.ShowArrows to implement DependencyProperty [WPF, METRO]  thanks to perturbare
+ Fixed minor performance problems in ZoomControl [METRO]
+ Fixed and enhanced automatic data object Id resolve logic [WPF,METRO] thanks to perturbare
+ Fixed ZoomControl zoom sometimes not firing from code call after control is loaded [WPF]
+ Fixed VB sample project dependencies and refactored code a bit
+ Fixed Fade Move animation logic to report OnCompleted event correctly [WPF]
+ Made EdgeControlBase::UpdateEdge() method public. It can be used now to fully update edge visual on custom edge-related modifications [WPF, METRO]
+ Improved main layout calculation logic to gain performance improvements [WPF, METRO]
+ Reorganized Example apps namespaces and code for greater good :)
+ Merged EdgePointerImage and EdgePointerPath into one universal DefaultEdgePointer class [WPF, METRO]
+ Improved edge and its template parts rendering/calc performance [WPF, METRO]
+ Enhanced edge labels logic so now it don't require additional template bindings and modifications (Angle or RenderTransform) [WPF]
+ GraphArea::PreloadVertexes() now accepts graph param as optional (null by default) and uses LogicCore.Graph in that case [WPF, METRO]
+ Decoupled serialization logic from GraphX completely [ALL]  thanks to perturbare
+ Adjusted FR and BoundedFR default values for random initial positions [All]
+ Now GraphX for WPF requires only .NET Framework 4.0 to build & run [WPF]
+ Refactored almost all of the GraphX code for improvements and code quality. Changed many namespaces for better name reflection [ALL]

BREAKING CHANGES:
* !!!WARNING!!! This GraphX version has fallen under the heavy hand of code refactoring and along with the numerous code improvements 
	almost ALL of the namespaces has been changed to better reflect logical code grouping and ease additional platform support through code reusability. 
	Also i've get rid of the several different XAML xmlns usings in favor of single one. I'm very sorry that this changes will force you to update your 
	GraphX projects but i realy felt that i must do it once and for all. You will have to change most of the usings in code and XAML templates: i strongly
    recommend you to use Resharper or any other code quality tool which will help to do this in minutes (or even seconds).

	Core changes:
	- All controls, behaviours and their interfaces are moved to GraphX.Controls namespace
	- All algorithms are spreaded across GraphX.PCL.Logic.Algorithms namespace with additional OverlapRemoval, LayoutAlgorithms, EdgeRouting endings
	- All base models and interfaces are now in GraphX.PCL.Common.Models namespace
	- All GraphX primitives (Point, Rect, etc.) are left in GraphX.Measure for better code readability in cases when they are intersected with System.Windows namespace twins

* IGXLogicCore now include ExternalLayoutAlgorithm, ExternalOverlapRemovalAlgorithm, ExternalEdgeRoutingAlgorithm for simplier external algo assignment
* Now GraphX for WPF requires only .NET Framework 4.0 to build & run
* EdgeLabelControl no longer needs default Angle binding and RenderTransformOrigin setup. They are processed internally [WPF]
* GraphArea::GenerateGraph() method now has generateAllEdges param True by default.
* Renamed following peoperties, moved them to EdgeControlBase and implemented them as DependencyProperty:
	* LogicCore::EdgeSelfLoopCircleOffset -> SelfLoopIndicatorOffset
	* LogicCore::EdgeSelfLoopCircleRadius -> SelfLoopIndicatorRadius
	* LogicCore::EdgeShowSelfLooped -> ShowSelfLoopIndicator
* Renamed following ZoomControl properties:
	* ZoomDeltaMultiplier -> ZoomSensitivity
	* MaxZoomDelta -> MaximumZoomStep
* Completely deprecated EdgeControl::PART_edgeArrowPath template PART in favor of the new DefaultEdgePointer (PART_EdgePointerForSource & PART_EdgePointerForTarget). 
	Please renew your custom templates. You can find an example in Generic.XAML template.
* Self looped edges display logic has been slightly changed with the introduction of custom template PART (PART_SelfLoopedEdge). Now LogicCore::SelfLoopIndicatorOffset
is (0,0) by default and indicator is shown in the top left vertex corner minus indicator size. You can change this behavior by overriding EdgeControl::PrepareSelfLoopedEdge() method.
* GetVertexSizeRectangles() method moved from GraphArea to LogicCore.
* Edge labels placement logic has been slightly changed when they are applied to parallel edges. Labels offset now translates them into different directions, for ex. one up, one down, one up.. etc. 
	This behavior helps to better place labels for double parallels. Also parallel edge labels now are not flipped when axis changes during label rotation. If you're uncomfortable with these changes, 
	please let me know!

RELEASE 2.1.8
+ Added basic support for Image based edge pointers. Introduced new object for EdgeControl template: [WPF, METRO(bugged)]
	1. EdgePointerImage class with name "PART_EdgePointerImageForSource" - marks edge source pointer (new!)
	2. EdgePointerImage class with name "PART_EdgePointerImageForTarget" - marks edge target pointer
	Look in GeneralTemplate.xaml of ShowcaseApp.WPF project.
	Added rotation support for image based edge pointers
+ Added extensibility to corresponding controls by inheriting from IEdgeLabelControl and IEdgePointer [WPF, METRO]
+ Added extensibility to corresponding controls by inheriting from IVertexLabelControl [WPF, METRO]
+ Added support method GraphArea::GetVertexControlAt(Point position) to get VC by coordinates [METRO, WPF]
+ Added VertexControl::GetCenterPosition() method to get vertex center position instead the default top-left [WPF, METRO]
+ Added new showcase example: Templates/Graph editor [WPF]
+ Added new option GraphArea::LogicCoreChangeAction which defines what action will be taken on LogicCore property change. You can rebuild graph now. [WPF, METRO]
+ Added new sync calculation cancellation feature [WPF, METRO] thanks to jorgensigvardsson
+ Added new property EdgeLabelControl::DisplayForSelfLoopedEdges which is self explaining [WPF, METRO]
+ Fixed edge labels display for self looped edges [WPF, METRO]
+ Fixed annoying data binding error in ZoomControl slider binding [METRO, WPF]
+ Fixed ZoomControl unresponsivness after startup (prev needed to change zoom/translation first to work fine) [WPF,METRO]
+ Fixed ZoomControl::Zoom property bug on empty content window resize [WPF, METRO]
+ Fixed dynamic graph showcase example first vertex auto zooming onto [WPF]
+ Fixed some issues in ShowcaseApp.WPF
+ Fixed GraphArea::DeserializeFromFile() logic and filestorage logic to properly restore internal data for loaded graphs [WPF, METRO]
+ Fixed calculation of label control position and angle [WPF, METRO] thanks to jorgensigvardsson
+ Implemented EdgeControl::LabelVerticalOffset property as dependecy [WPF, METRO]
+ Updated default control templates to include some new properties setup by default [WPF, METRO]
+ Optimized showcase app media files
+ Improved extensibility by making some methods virtual for EdgeLabelControl, VertexLabelControl, EdgeControl

!Breaking changes
+ Renamed and changed to Enum - ZoomControl::UseAbsoluteZoomOnMouseWheel to MouseWheelZoomingMode [METRO, WPF]
+ Expanded EdgeControl event args with mouse and keyboard modifiers [WPF]
+ Moved all WPF interfaces to GraphX.Controls.Models.Interfaces namespace and all METRO interfaces to GraphX.Controls.Models.Interfaces [WPF, METRO]
+ Edge rotation now needs additional modification for all custom EdgeLabelControl templates. Please add: <Setter Property="RenderTransformOrigin" Value="0.5,0.5" />[WPF, METRO]
+ Due to new calc cancelation feature the following has been changed:
	- IExternalEdgeRouting, IExternalLayout, IExternalOverlapRemoval interfaces and different algorithm base classes now implement Compute(CancellationToken cancellationToken) method with an additional param
	- METRO now works only in async mode. Postfix Async has been added for GraphArea graph generation and relayout methods.

RELEASE 2.1.7
+ Added new ShowcaseApp.WPF with mostly the same functionality as before but in a new nutshell and with refactored code. Expect new showcases soon.

+ Added some new exceptions for GraphArea on invalid or insufficient data [WPF,METRO]
+ Addded automatic default params generation for GXLogicCore if default algorithm was changed and default params property is null
+ Fixed async calc not being aborted on invalid data (can cause crash) [WPF,METRO]
+ Implemented VertexControl::ShowLabel property as dependecy for templating purpose [WPF]
+ Fixed vertex label display [WPF]
+ Implemented IOverlapRemovalParameters properties setters to be able to change params easily[ALL]
+ Made EdgeBase::RoutingPoints property virtual in case you want to override it and add custom serialization attributes (as was the issue with YAXLib)[ALL]

!Breaking changes
+ Renamed VertexControl::MathShape property to VertexShape for template bindings to work [WPF, METRO]
+ Removed YAXLib project from solution and its dependencies from GraphX projects except showcase project. This will make GraphX independent from this 3rd party lib. [WPF]
  The cost is that there is no built in FileServiceProvider anymore but you can easily create your own using provided interface or use YAXLib example from showcase app.
  One less additional dll file :)
  
RELEASE 2.1.6
+ [DELAYED] New shiny ShowcaseApp for WPF that includes new interface and code refactoring [WPF]
+ Fixed unique id problems when building graph manualy using AddVertex() and AddEdge() method [WPF, METRO]
+ Fixed critical bug with auto id generation that prevented some custom graph logic to work as intended [ALL]
+ Fixed some derelict dependencies
+ Some code refactoring
+ Updated licenses list [WPF]

!Breaking changes
+ Introduced GraphArea.AutoAssignMissingDataId property that is now responsible for auto unique id generation for vertex and edge data objects if they miss it [WPF,METRO]

RELEASE 2.1.5 WIP
+ Added selective vertex and edge support for calculations. Use ProcessingMode property on vertex or edge data object to include/exclude it in calculations and visualization.
	Supported options:
		> Default
		> Freeze - freeze object position and use it in consequent calculations to pin the object (limited algorithms support)
		> Exclude - exclude object from calculations completely though it will remain in supplied graph (supported everywhere)
	Limitations:
		> Works only in WPF version.
		> Freeze supported algs: SimpleRandom

+ WPF: Fixed major memory leak in WPF version when regenerating visual edges
+ METRO: Fixed edge labels placement w/o edge routing
+ Changed CopyToBidirectionalGraph() extension method
+ Fixed rectangular selection logic
+ Some code refactoring, including
	> Class base (T) members adjusts
	> Code case refactoring of older code
	> More commments

RELEASE 2.1.4 WIP
+ Fixed dynamic Showcase example when only one vertex was added
+ Misc project fixes including build type and information

RELEASE 2.1.3 WIP

+ Added experimental METRO support

+ Redesigned libraries for PCL implementation
	This shouldn't lead to major problems but some breaks will definetly occur:
	- All routines in Logic library now operates with custom System.Windows types (platform-specific libraries operates (externaly) with System.Windows types). This includes any custom algorithms. 
	- DataSaveModel class renamed to GraphSerializationData 
	- Althought file operations such as Save/load layout remains the same for the end user the background logic of this features has been changed:
		- Implemented IFileServiceProvider interface and corresponding property in GXLogicCore class
		- When you assign GraphArea::LogicCore property the new default (platform-specific) FileServiceProvider is created and assigned to LogicCore automaticaly (if corresponding property is null)
		- You can create custom FileServiceProviders to work with 3rd party serialization libraries or code your own file operations logic

+ Added example project for VB.NET
+ Added method to GraphArea to show/hide vertex labels
+ Added MouseUp event global handling for VertexControl
+ Improvement: GXLogicCore expected concrete class as TGraph (thanks to stefanpe)
+ Removed redundant dependencies (reworked some dependencies)
+ Implemented many small tweaks and optimizations during the port process
+ Implemented ITrackableContent interface that helps to abstract from direct GraphArea links in ZoomControl
+ GraphArea::ComputeEdgeRoutesByVertex() method made internal. If you still need it please use LogicCore::ComputeEdgeRoutesByVertex().
+ Renamed method SaveIntoFile to SerializeToFile
+ Renamed method LoadFromFile to DeserializeFromFile
+ Set (0,0) coordinate by default for all custom objects newly added to GraphArea
+ Fixed edges after storage state loading
+ Fixed LinLog, KK, ISOM, FR algorithms display when there is only one vertex
+ Fixed overlap removal algorithm loading with incorrect parameters
+ Fixed edge labels positioning
+ Fixed EdgeControl data context bug after graph deserialization

PCL-IMPROVEMENTS
- Added YAXLib v2.13 project sources splitted into 2 different projects: main and PCL compliant (for attributes to be availbale in PCL libraries)
- Implemented PCL version of GraphX.Common
- Implemented PCL version of GraphX.Logic
- Implemented GraphX.Controls platform-specific library


RELEASE 2.0.2
+ Added vertex control labels with following functionality:
	+ 2 available positioning modes: by sides or by coordinates
	+ Always attached to vertex and moves with it
	+ Rotation angle support
	+ Same template logic as in EdgeLabelControl
+ Added key modifiers to vertex event args
+ Added XAML templates usage example in WF project
+ Added new layout type Custom. When set layout algorithm calculation is skipped completely and manually added data is used for OR and ER algorithms (if any).
+ Added (reintroduced) GraphArea::SideExpansionSize property which gets or sets additional space for GraphArea borders. Useful for zoom adjustments when custom text or controls which are not used in size calculations must fit into the zooming.
+ Added IGraphControlFactory-Interface and Implementation for Edge and Vertex controls creation (thanks to Paul Mandalka)
+ Added simple Nuget-Package specification for GraphX (use createPackage.bat to create the nuget package for GraphX) (thanks to Paul Mandalka)
+ Added new ZoomControl::ZoomAnimationCompleted event (thanks to Paul Mandalka)
+ Fixed hidden edges update on vertex drag
+ Fixed PrintHelper::ExportToImage method to use DPI-Settings for Image Rendering (thanks to Paul Mandalka)
+ Fixed labels rendering for parallel edges. Now they are displayed separately for each edge.
+ Fixed async calculations being broken due to LogicCore property became dependency
+ Fixed ViewFinder not deriving ZoomControl content background
+ Fixed edge label update on alignment change
+ Fixed self-looped edges handling in GraphArea::GenerateEdgesForVertex() method
+ Fixed bugs with edge routing calculation in some cases
+ Fixed: Graph-Area LogicCoreProperty was registered using GraphAreaBase which could cause a problem (thanks to Paul Mandalka)
+ Fixed visual properties recovery terminating template values 
+ Fixed Sugiyama and EfficientSugiyama algorithms calculation with only one vertex
+ Implemented some properties as dependencies
+ Implemented EdgeControl::IsSelfLooped property as read-only dependency property.
+ Reworked EdgeLabelControl inner logic. Should now be more flexible and performance efficient.
+ Reworked main objects hierarchy to use more interfaces for loosened conditions
+ Some code refactoring. Minor performance improvements.

RELEASE 2.0.1
+ Added GraphArea::AddCustomChildControl() and GraphArea::RemoveCustomChildControl() methods to make the possibility to add any custom controls that are not vertex or edge.
+ Added ZoomControl::ToContentRectangle() method which translates screen rectangle coordinates to content rectangle coordinates
+ Added correct endpoints rendering for parallel edges on a rectangular vertex shape (thanks ro bleibold)
+ Added some hooks for ZoomControl to notify Presenter::RenderTransform on scale/translation changes. Now bindings to that property are correctly refreshed.
+ Added additional handling of custom objects in GraphArea (eg. clearing)
+ Added dependency property for GraphArea::LogicCore
+ Added new property GraphArea::EnableVisualPropsRecovery. Gets or sets if visual properties such as edge dash style or vertex shape should be automaticaly reapplied to visuals when graph is regenerated.
	Turning this off can save a bit of performance if you don't use custom values.
+ Added new property GraphArea::EnableVisualPropsApply. Gets or sets if visual properties such as edge dash style or vertex shape should be automaticaly applied to newly added visuals which are added using AddVertex() or AddEdge() or similar methods.
	Turning this off can save a bit of performance if you don't use custom values and making many manual edge/vertex create or remove operations.
+ Added GraphArea::SetVerticesHighlight() and GraphArea::SetEdgesHighlight() methods for easier highlight feature handling.
+ Improved some showcase code
+ Improved GraphArea code performance (slightly)
+ Fixed minimap rectangle drag issue
+ Fixed issue with ZoomControl area selection by Ctrl+Alt+Click
+ Fixed issue with GraphArea::VertexSelected event
+ Fixed issue with inproper overlap removal work (that issue affected some algorithms vis) using new coordinates system
+ Fixed issue with incorrect rendering of parallel edges (thanks to bleibold)
- GraphArea::Children property has been hidden. Use EdgesList and VertexList properties and corresponding methods instead.


RELEASE 2.0: PORT-READY Edition
+ Spearated GraphX into the 3 projects: GraphX.Common, GraphX.Logic and GraphX.Controls. Each project serves its own purpose.
  * *GraphX.Logic* contains all the logic and algorithms 
  * *GraphX.Common* contains common objects between logic and visual controls
  * *GraphX.Controls* contains visual controls and all associated classes
+ Added GraphArea.LogicCore property that must be set in order to be able to work with GraphArea
+ Added parallel edges logic call in *GraphArea.UpdateAllEdges()* method
+ Added some code improvements and corrections, made some classes internal, abstract or sealed
+ Added *EdgeControl::AlignLabelsToEdges* and *EdgeControl::LabelVerticalOffset* properties that implements edge labels alignment to edges at different angles.
	Labels now can be placed at the same angle as edge is drawn and optionaly offseted up or down to not overlap the edge itself.
+ Added some recently implemented features to Showcase app
+ Added optional param to *GraphArea::GenerateAllEdges()* that enables GraphArea layout update before edges calculation. True by default.
+ Added minimap from Zoombox to ZoomControl and changed some of its features.
+ Added new method *ZoomControl::ZoomToContent()* that should be used instead of ZoomTo() method
+ Added *ZoomControl* display in VS design view with minimap preview
+ Slightly improved rendering performance for large graphs
+ Fixed long living issue with zoom content resize and vertex drag which involves following global changes:
	+ Correct GraphArea size rectangle can now be only determined by *GraphArea::ContentSize* property which contains rectangle that includes all visuals. GraphArea visual size is ALWAYS fixed at (10,10).
	+ Now all vertices and edges positioned in *GraphArea* using TOP-LEFT corner as the position coordinates (previously coordinates was pointing at the object center).
	+ ZoomControl now closely tied with GraphX, though it can be made universal
+ Fixed edge labels rendering issue
+ Fixed some showcase app exceptions
+ Fixed edge labeling showcase example
+ Fixed GraphArea in design diplay mode
+ Fixed ParameterizedLayoutAlgorithm exception (thanks to thinkJD)
+ Fixed parallel edges calculations in case of opposite-directed edges (thanks to thinkJD)
+ Fixed invalid parallel edges detection in some cases (thanks to bleibold)
- Image export currently supports only *ZoomControl* visible area export
- Moved *ImageType* enum into *GraphX* namespace
- Moved all properties associated with logic from GraphArea to *GXLogicCore* class
- Removed *Zoombox* from project completely (now only *ZoomControl* is supported and being actively enchanced)


RELEASE 1.0.1
+ Changed *ExportToImage()* parameters: added *useZoomControlSurface* param that enables zoom control parent visual space to be used for export instead *whole GraphArea* panel.
	Using this technique it is possible to export graphs with negative vertices coordinates.
+ Added common interface *IZoomControl* for all included Zoom controls
+ Added new method *GraphArea.GenerateGraph()* that accepts only optional parameters and will use internal *GraphArea.Graph* property as the source (assuming it was already set earlier or exception will be thrown)
+ Added new method *GraphArea.SetVerticesDrag()* that controls edge drag mode for all vertices that are added into the GraphArea
+ Added new method *GraphArea.SetVerticesMathShape()* that sets math shape for all vertices that are added into the GraphArea
+ Added Windows Forms interop compatibility mode. You must specify *GraphArea.EnableWinFormsHostingMode* property for this to work.
+ Added edge parallelization as the post-process algorithm
	+ Added *GraphArea.EnableParallelEdges* and *GraphArea.ParallelEdgeDistance* properties
	+ Added *EdgeControl.CanBeParallel* property
+ Fixed some code definitions

RELEASE 1.0.0
+ Added optional automatic ID assignment for data edges and vertices when using *Area.GenerateGraph()* method. Only absent IDs are assigned with unique values
+ Addded *VertexControl.MathShape* property which affects how edge connectors are rendered on the vertices
	+ Added types are: rectangle, circle, diamond, triangle
+ Added new mouse over animation *ScaleControlAnimation*
+ Added new *GraphArea.DeleteAnimation* and corresponding animation logic
+ Added new *GraphArea.MouseOverAnimation* and corresponding animation logic
+ Added MouseEnter/Leave edge events for *GraphArea* and fixed some old ones
+ Added some new animations for newly implemented animation types
+ Added *GraphArea.SideExpansionSize* property which sets additional space around graph area. Created for scale animation to not being cut by area borders.
+ Fixed potential *EventOptions* memory leak
+ Fixed mistype in *GraphArea.DefaultEdgeRoutingAlgorithm* name
+ Redesigned Themed Graph templates for better visual experience. Now they are cool :)
- Removed *VertexControl.MouseOverAnimation* animation property
- Removed MainVertex logic as it is not universal. Removed corr. param from *GraphArea.GenerateGraph()* method.

BETA 0.9.5
+ Added *GraphArea.SaveAsImage()* method that supports different image formats
+ Added *GraphArea.UseNativeObjectArrange* property. True by default. If set to False it will use different coordinates handling that helps to soften vertex drag issues to the top and left area sides.
+ Added *GraphArea.Translation* property. It is needed to get correct translation coordinates when determining object position from the mouse coordinates.
+ Added new *VertexControl.PositionChanged* event along with the new *VertexControl.EventOptions* property that allows enable/disable and do tracking of the vertex control position change and other events.
+ Added imported *CompoundFDP* layout algorithm (from Graph#)
+ Added new *PathFinder* edge routing algorithm first preview
+ Added *ZoomControl.UseAbsoluteZoomOnMouseWheel* property to enable absolute coord zooming by mousewheel
+ Added some commented samples for old *ZoomControl* as dragging is good with it right now.
+ Added additional params into *VertexControl* constructor.
+ Added new save/load procedures using *YAXLib* serialization
+ Added some new GraphX unique exception types along with the new validation checks
+ Fixed *GraphAreaBase* arrange calculation to include edge routing points into the formula
+ Fixed *ZoomControl* Fill and Fit features with new arrange mode
+ Fixed vertex dragging example in Showcase app to correctly add vertices with different scaling and *GraphArea* panel size.
+ Fixed odd edge routing calculation of endpoints (connector points). Now it looks much better when dragging vertex with *UpdateEdgesOnMove* flag set.
+ Fixed Showcase app tooltips implementation to always update them on show.
+ Fixed *ZoomControl* content rendering when not using native arrange mode (still doesn't accurate)
+ Fixed *ExportToImage()* image rendering when not using native arrange mode
+ Fixed *ExportToImage()* parameters handling
+ Improved Zoombox rendering speed
+ Improved rendering performance a bit. Overal performance improvement and tweaks.
+ Made *GraphArea.SetX / SetY* to set *FinalX* and *FinalY* attached props by default with the same value. Now all external animation coord routines needs optional param *alsoSetFinal* set to False if they are dealing with X and Y coords only.
+ Made *GraphArea.TopLeft* property visible
+ Made animation launch algorithm to be able to launch vertex and edge animations independently.
+ Removed *VertexControl.IsTracePositionEnabled*. Moved functionality into *EventOptions* property.
+ Removed redundant *OnGraphGenerateFinished()* call
+ Renamed external namespaces by adding lead GraphX name (external lib compatibility issues resolved)
+ Reworked *EdgeControl* vertex position tracing to use *VertexControl* trace implementation instead.


BETA 0.9.4
+ Added Xceed *Zoombox* control into the library. The old one is still there for compatibility and stuff...
+ Added optional params into *EdgeControl* constructor
+ Added *GraphArea.GetVertexPositions* method
+ Added ability to area-select vertices using zoom control fuctionality
+ Added visual vertex search and display example, manual edge drawing example in Dynamic Graph tab
+ Added *VertexControl.GetPosition()* method that returns Point coordinates of the control in GraphArea panel
+ Added methods to print *GraphArea* and export it as PNG image, updated Showcase app
+ Added tooltips to Showcase app -> Edge Routing Graph -> edge bundling params and adjusted edge bundling example to produce more visible result
+ Made *EdgeControl.DashStyle* property as DependencyProperty
+ Made relative mouse wheel zoom default for *Zoombox* control
+ Made edge arrow template object mandatory. Now it can be excluded from the EdgeControl template.
+ Fixed Showcase app -> Edge Routing Graph -> edge bundling relayout
+ Fixed edges rendering when ShowArrows and ShowLabel properties has been changed

BETA 0.9.3.1
+ Fixed extensive edges rendering

BETA 0.9.3
+ Added smooth curves support for all algorithms using *GraphArea.UseEdgeCurving* property.False by default. Specifies that edge curving technique must be used to display graph edges.
+ Added edge bundling support
+ Added looped edges support
+ Added dashed edges support
+ Added parameters classes for all edge routing algorithms
+ Added *GraphArea.RemoveVertex* and *GraphArea.RemoveEdge* methods
+ Added edge labels support
+ Added showcase graph for edge routing examples
+ Added showcase graph for dynamic operations examples (selection, addition, removal etc.)
+ Added support for dynamic edge routing while dragging vertices
+ Added optional parameter to *GraphArea.Relayout()* and *GraphArea.GenerateGraph()* methods to generate all possible edges if none are present or update existing edges after calculations are done.
+ Added *bool UpdateEdgesOnMove* property to *DragBehaviour* to update edge routing while dragging vertex. By default this is False resulting in better performance as edges are redrawn only after dragging is finished.
+ Fixed edges drawed above vertices
+ Fixed *GraphArea.GenerateGraphFinished* event call
+ Too many other changes to document all of them. Read updated documentation for the most latest info.

Some of the breaking changes
+ Edge base class replaced by *EdgeBase<TVertex>* that implements all essential properties by default
+ Vertex base class replaced by *VertexBase* that implements all essential properties by default
+ GraphState property *VisibleEdges* type changed to *List<TEdge>*. Route points no longer stored in *EdgeControl*, they are stored in *EdgeBase* instead.
+ Edge and vertex data objects IDs is now of type INT32
+ Removed *IMoveAnimation* interface. Use *MoveAnimationBase* class instead as the base class.
+ Reworked move animation mechanics to batch-execute. All methods and logic changed. See documentation on the web site for more info.
+ *DragBehaviour* no longer require X and Y attached properties which has been removed.

BETA 0.9.2
+ SimpleER algorithm optimizations
+ Some showcase behaviour fixes

BETA 0.9.1
+ Added some documentation
+ Added disposable interfaces
+ Added main vertex template example
+ Improved templated example

BETA 0.9.0
*** CORE ***
+ Added in-memory graph state storage including data objects
+ Added async graph generation and relayout
+ Added calculation events such as RelayoutFinished

*** SHOWCASE ***
+ Added layout and state saving examples
+ Added async loading indicator

DEV v0.8.3
*** CORE ***
+ Added SimpleER edge routing algorithm
+ Added external and default edge routing support

DEV v0.8.2
*** CORE ***
+ Optimized external layout algorithms handling
+ Optimized Graph# source classes


DEV v0.8.1
*** CORE ***
+ Added props for GraphArea default algo optional parameters
+ Added property UseCtrlForMouseWheel for ZoomControl

